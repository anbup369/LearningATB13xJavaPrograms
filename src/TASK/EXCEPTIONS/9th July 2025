Task 1: Basic Try-Catch with ArithmeticException

ðŸ“˜ Description:
Divide a number by zero and handle the exception.

ðŸ§¤ Expected Output:
Catch ArithmeticException and print a friendly message.



âœ… Task 2: Try-Catch with Multiple Catch Blocks

ðŸ“˜ Description:
Write code that may throw either ArithmeticException or ArrayIndexOutOfBoundsException and handle them with multiple catch blocks.

ðŸ§¤ Expected Output:
Print which exception occurred.



âœ… Task 3: Try-Catch-Finally

ðŸ“˜ Description:
Create a program with a try, a catch, and a finally block.
Demonstrate that the finally block always executes.



âœ… Task 4: Nested Try-Catch

ðŸ“˜ Description:
Write a program with a try-catch block inside another try-catch block.
Example: Outer block for ArithmeticException, inner for ArrayIndexOutOfBoundsException.



âœ… Task 5: Catch Using Exception (Generic Catch)

ðŸ“˜ Description:
Use only catch(Exception e) to catch any exception.
Throw a NullPointerException or ArithmeticException inside try.



âœ… Task 6: Catch Specific vs Generic Exception

ðŸ“˜ Description:
Try the same code twice â€” once using catch(Exception e) and once using catch(NullPointerException e).
Compare output and behavior.



âœ… Task 7: Handle Checked Exception using Try-Catch

ðŸ“˜ Description:
Open a file using FileReader and handle FileNotFoundException using try-catch.



âœ… Task 8: Throw Exception and Catch It

ðŸ“˜ Description:
Manually throw an exception using throw new ArithmeticException() and catch it.



âœ… Task 9: Try Block Without Exception

ðŸ“˜ Description:
Write a try block that does not throw any exception.
Verify that the catch block is skipped and finally still runs.



âœ… Task 10: Try With Multiple Statements

ðŸ“˜ Description:
Write multiple statements in a try block.
Ensure if the first fails, the rest are not executed, and control goes to catch.